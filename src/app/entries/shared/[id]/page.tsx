'use client';

import { getAllMediaForEntry, fetchSharedEntry } from '@/lib/api';
import { useQuery } from '@tanstack/react-query';
import { useParams } from 'next/navigation';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { useRef, useState } from 'react';
import MarkdownRenderer from '@/components/custom/markdown-renderer';
import { useUser } from '@/hooks/useUser';
import Image from 'next/image';
import { Download } from 'lucide-react';
import { Media } from '@/index/media';

export default function EntryPage() {
  const {} = useUser();
  const params = useParams();
  const entryRef = useRef<HTMLDivElement>(null);
  const [selectedMedia, setSelectedMedia] = useState<Media | null>(null);

  const id = params.id as string;
  const { data: entry } = useQuery({
    queryKey: [`shared-entry-${id}`],
    queryFn: () => fetchSharedEntry(id),
    retry: false,
    refetchOnWindowFocus: false,
  });

  const { data: media } = useQuery({
    queryKey: [`media-${id}`],
    queryFn: () => getAllMediaForEntry(entry?.id),
    enabled: !!entry,
    retry: false,
    refetchOnWindowFocus: false,
    staleTime: 900000,
  });

  const handleGeneratePdf = async () => {
    if (!entryRef.current || !entry) return;

    const pdf = new jsPDF({
      unit: 'mm',
      format: 'a4',
      orientation: 'portrait',
    });

    pdf.setProperties({
      title: entry.title,
      creator: 'Diamond Diaries',
      subject: 'Journal Entry',
    });

    const margin = 20;
    const pageWidth = 210;
    const contentWidth = pageWidth - 2 * margin;
    const pageHeight = 297;
    const titleFontSize = 18;
    const bodyFontSize = 12;
    let yPosition = margin;

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(titleFontSize);
    pdf.setTextColor(0, 50, 67);
    pdf.text(entry.title, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    pdf.setFont('helvetica', 'italic');
    pdf.setFontSize(bodyFontSize);
    pdf.setTextColor(100, 100, 100);
    const dateText = new Date(entry.journalDate).toLocaleDateString();
    pdf.text(dateText, pageWidth / 2, yPosition, { align: 'center' });
    yPosition += 15;

    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(bodyFontSize);
    pdf.setTextColor(0, 0, 0);

    const contentElement = entryRef.current;
    const canvas = await html2canvas(contentElement, {
      scale: 2,
      useCORS: true,
      logging: false,
      windowWidth: contentElement.scrollWidth,
      windowHeight: contentElement.scrollHeight,
    });

    const contentImgWidth = contentWidth;
    const contentImgHeight = (canvas.height * contentImgWidth) / canvas.width;

    pdf.addImage(
      canvas.toDataURL('image/jpeg', 1.0),
      'JPEG',
      margin,
      yPosition,
      contentImgWidth,
      contentImgHeight
    );

    yPosition += contentImgHeight + 15;

    const lastPage = pdf.getNumberOfPages();
    pdf.setPage(lastPage);
    pdf.setFont('helvetica', 'italic');
    pdf.setFontSize(10);
    pdf.setTextColor(100, 100, 100);
    pdf.text(
      `Word count: ${entry.wordCount}`,
      pageWidth / 2,
      pageHeight - margin / 2,
      { align: 'center' }
    );

    pdf.setFont('helvetica', 'bold');
    pdf.setFontSize(8);
    pdf.setTextColor(0, 50, 67);
    pdf.text('Generated by Diamond Diaries', pageWidth / 2, pageHeight - 10, {
      align: 'center',
    });

    await pdf.save(
      `${entry.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.pdf`
    );
  };

  const openMediaFullscreen = (media: Media) => {
    setSelectedMedia(media);
  };

  const closeMediaFullscreen = () => {
    setSelectedMedia(null);
  };

  const truncateFilename = (filename: string) => {
    if (!filename) return '';
    const lastDotIndex = filename.lastIndexOf('.');
    if (lastDotIndex === -1) {
      return filename.length <= 5 ? filename : filename.substring(0, 5) + '...';
    }

    const name = filename.substring(0, lastDotIndex);
    const extension = filename.substring(lastDotIndex);

    // If name is already 5 chars or less, show it in full
    return name.length <= 5
      ? filename
      : name.substring(0, 5) + '...' + extension;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-[#003243] to-[#002233] pt-20 pb-72 px-4">
      {selectedMedia && (
        <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
          <div className="relative max-w-4xl w-full bg-white rounded-xl shadow-xl overflow-hidden">
            <div className="absolute top-4 right-4 flex gap-2 z-10">
              <button
                onClick={closeMediaFullscreen}
                className="bg-white rounded-full p-2 shadow-md hover:shadow-lg transition-all duration-200 cursor-pointer"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-6 w-6 text-[#003243]"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>

            <div className="p-6">
              <h3 className="text-xl font-bold text-[#003243] mb-4">
                {selectedMedia.filename}
              </h3>

              <div className="flex justify-center">
                {selectedMedia.type === 'IMAGE' ? (
                  <div className="relative w-full h-[70vh]">
                    <Image
                      src={selectedMedia.presignedUrl}
                      alt={selectedMedia.filename}
                      fill
                      className="object-contain"
                    />
                  </div>
                ) : selectedMedia.type === 'VIDEO' ? (
                  <video controls className="w-full max-h-[70vh]" autoPlay>
                    <source src={selectedMedia.presignedUrl} type="video/mp4" />
                    Your browser does not support the video tag.
                  </video>
                ) : selectedMedia.type === 'FILE' ? (
                  <div className="flex flex-col items-center justify-center p-10 bg-gray-50 rounded-lg w-full">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      className="h-24 w-24 text-[#003243] mb-4"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                      />
                    </svg>
                    <p className="text-lg text-[#003243]">
                      {selectedMedia.filename}
                    </p>
                  </div>
                ) : null}
              </div>

              <div className="flex justify-center mt-6 gap-4">
                <a
                  href={selectedMedia.presignedUrl}
                  download={selectedMedia.filename}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="bg-[#003243] text-white px-6 py-2 rounded-lg hover:bg-[#004d6b] hover:shadow-md transition-all duration-200 cursor-pointer flex items-center"
                >
                  <Download className="h-5 w-5 mr-2" />
                  Download
                </a>
              </div>
            </div>
          </div>
        </div>
      )}

      <div className="max-w-4xl mx-auto bg-white rounded-xl shadow-lg p-6">
        <div className="flex flex-col items-center mb-6">
          <h1 className="text-2xl font-bold text-[#003243] mb-4">
            {entry?.title}
          </h1>
          <div className="flex gap-4 mb-6 items-center justify-center">
            <button
              onClick={handleGeneratePdf}
              className="flex items-center px-3 py-2 bg-[#003243] text-white rounded-lg shadow-sm hover:bg-[#004d6b] hover:shadow-md hover:scale-105 transition-all duration-200 cursor-pointer"
            >
              <Download className="h-5 w-5" />
            </button>
          </div>
        </div>

        <div
          className="prose prose-lg w-full max-w-4xl mx-auto px-8 py-6 bg-white rounded-lg shadow-sm mb-8"
          ref={entryRef}
        >
          <MarkdownRenderer
            content={entry?.content.replace(/\\n/g, '\n') ?? ''}
          />
        </div>

        <p className="text-gray-600 text-sm mt-8 mb-4 text-center">
          {entry?.wordCount} words
        </p>
      </div>

      {media && media.length > 0 && (
        <div className="fixed bottom-0 left-0 right-0 bg-white/80 backdrop-blur-sm border-t border-gray-200 shadow-lg p-4 z-10">
          <div className="max-w-4xl mx-auto">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-[#003243]">
                Attached Media
              </h2>
            </div>

            <div className="overflow-x-auto pb-2">
              <div className="flex gap-4 items-center">
                {media.map((entryMedia) => (
                  <div
                    key={entryMedia.id}
                    data-media-id={entryMedia.id.toString()}
                    className="relative flex-shrink-0 w-[220px] border rounded-lg bg-white shadow-sm hover:shadow-md transition-all duration-200 cursor-pointer"
                    onClick={() => openMediaFullscreen(entryMedia)}
                  >
                    <div className="absolute top-2 right-2 flex gap-2">
                      <a
                        href={entryMedia.presignedUrl}
                        download={entryMedia.filename}
                        target="_blank"
                        rel="noopener noreferrer"
                        onClick={(e) => e.stopPropagation()}
                        className="cursor-pointer bg-white rounded-full p-1 shadow-md hover:shadow-lg hover:scale-110 transition-all duration-200"
                      >
                        <Download className="h-5 w-5 text-[#003243]" />
                      </a>
                    </div>

                    <div className="p-3">
                      <p className="font-medium text-[#003243] mb-2 truncate text-sm">
                        {truncateFilename(entryMedia.filename)}
                      </p>
                      {entryMedia.type === 'IMAGE' ? (
                        <div className="relative overflow-hidden rounded-lg hover:shadow-md transition-all duration-200 h-[150px]">
                          <Image
                            src={entryMedia.presignedUrl}
                            alt={entryMedia.filename}
                            fill
                            className="object-cover rounded-lg hover:scale-105 transition-all duration-200"
                          />
                        </div>
                      ) : entryMedia.type === 'VIDEO' ? (
                        <div className="relative rounded-lg hover:shadow-md transition-all duration-200 h-[150px] overflow-hidden">
                          <video
                            width="200"
                            height="150"
                            className="rounded-lg hover:shadow-md transition-all duration-200 object-cover h-full w-full"
                          >
                            <source
                              src={entryMedia.presignedUrl}
                              type="video/mp4"
                            />
                            Your browser does not support the video tag.
                          </video>
                          <div className="absolute inset-0 flex items-center justify-center hover:scale-110 transition-all duration-200">
                            <div className="bg-black/30 rounded-full p-3 backdrop-blur-sm">
                              <svg
                                xmlns="http://www.w3.org/2000/svg"
                                className="h-8 w-8 text-white"
                                fill="none"
                                viewBox="0 0 24 24"
                                stroke="currentColor"
                              >
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z"
                                />
                                <path
                                  strokeLinecap="round"
                                  strokeLinejoin="round"
                                  strokeWidth={2}
                                  d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                                />
                              </svg>
                            </div>
                          </div>
                        </div>
                      ) : entryMedia.type === 'FILE' ? (
                        <div className="flex items-center p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-all duration-200 h-[150px] justify-center">
                          <svg
                            xmlns="http://www.w3.org/2000/svg"
                            className="h-16 w-16 text-[#003243] hover:scale-110 transition-all duration-200"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              strokeLinecap="round"
                              strokeLinejoin="round"
                              strokeWidth={2}
                              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
                            />
                          </svg>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
